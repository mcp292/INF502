--- pa2.py	2020-11-16 15:34:44.154508392 -0700
+++ /home/mcp/downloads/pa2.py	2020-11-16 15:38:34.427188201 -0700
@@ -1,275 +1,613 @@
-import requests
-import json
-import csv
-import os
-from datetime import date
-from bs4 import BeautifulSoup as bs
-
-def format_json(data):
-    return json.dumps(data, sort_keys=True, indent=2)
-
-
-class Repo:
-    def __init__(self, user, repo):
-        username = 'mcp292'
-        token = 'bb00c1b68d9890ad2b98d83825e69f49ef75ad09'
-        
-        sesh = requests.Session()
-        sesh.auth = (username, token)
-
-        response = sesh.get("https://api.github.com/repos/{}/{}".format(user, repo))
-        # response = requests.get("https://api.github.com/repos/{}/{}".format(user, repo))
-        repo_data = response.json()
-
-        # print(self.format_json(repo_data))
-                
-        self.name = repo_data["name"]
-        self.owner = repo_data["owner"]["login"]
-        self.description = repo_data["description"]
-        self.homepage = repo_data["homepage"]
-        self.repo_license = repo_data["license"]["name"] 
-        self.num_forks = repo_data["forks_count"]
-        self.watchers = repo_data["watchers"]
-        self.date_of_collection = date.today()
-        self.num_stars = repo_data["stargazers_count"]
-
-        # get pull request data from first page (1)
-        response = sesh.get("https://api.github.com/repos/{}/{}/pulls?page={}".format(user, repo, 1))
-        # response = requests.get("https://api.github.com/repos/{}/{}/pulls?page={}".format(user, repo, 1))
-        pull_request_data = response.json()
-
-        # extract pull requests
-        self.pull_requests = []
-        
-        for pull_request in pull_request_data:
-            self.pull_requests.append(PullRequest(pull_request, user, repo))
-
-        # for each extracted pull request store author
-        self.authors = []
-        existing_author = None  # default
-        
-        for pull_request in self.pull_requests:
-            # check if author already added
-            for author in self.authors:
-                if (pull_request.user == author.user):
-                    existing_author = author
-
-            # if author exists increment num pull requests
-            if (existing_author != None):
-                existing_author.inc_num_pull_requests()
-            else:
-                # add to list
-                self.authors.append(Author(pull_request.user))
-
-            # reset to default
-            existing_author = None
-        
-        # write to csv
-        self.write_to_csv(user, repo, self.pull_requests, self.authors)
-        
-        print()
-        print(self.name)
-        print(self.owner)
-        print(self.description)
-        print(self.homepage)
-        print(self.num_forks)
-        print(self.watchers)
-        print(self.date_of_collection)
-        print(self.num_stars)
-        print([str(item) for item in self.pull_requests])
-        print([str(item) for item in self.authors])
-        
-
-    def __str__(self):
-        return "{}/{}: {} ({})".format(self.owner, self.name, self.description, self.num_stars)
-
-
-    def to_CSV(self, filename):
-        file_exist = os.path.exists(filename)
-
-        header = vars(self).copy() # was deleting from original class
-
-        del header["pull_requests"]
-        del header["authors"]
-
-        with open(filename, mode='a', newline='') as CSVfile:
-            file_writer = csv.writer(CSVfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
-            
-            if(not file_exist):
-                file_writer.writerow(header)
-
-            file_writer.writerow(header.values())
-
-            
-    def write_to_csv(self, user, repo, pull_requests, authors):
-        # create file names
-        repo_fn="repos.csv"
-        pull_req_fn = "{}-{}.csv".format(user, repo)
-        author_fn="user.csv"
-
-        # write repo data
-        self.to_CSV(repo_fn)
-
-        # write pr data
-        for req in pull_requests:
-            req.to_CSV(pull_req_fn)
-
-        # write author data
-        for author in authors:
-            author.to_CSV(author_fn)
-        
-
-class PullRequest:
-    def __init__(self, pull_request, user, repo):
-        username = 'mcp292'
-        token = 'bb00c1b68d9890ad2b98d83825e69f49ef75ad09'
-        
-        sesh = requests.Session()
-        sesh.auth = (username, token)
-
-        self.title = pull_request["title"]
-        self.number = pull_request["number"]
-        self.body = pull_request["body"]
-        self.state = pull_request["state"]
-        self.date_of_creation = pull_request["created_at"]
-        self.user = pull_request["user"]["login"]
-        self.closing_date = None
-        
-        if (self.state != "open"):
-            self.closing_date = pull_request["closed_at"]
-
-        # get additional data by querying pull request number
-        response = sesh.get("https://api.github.com/repos/{}/{}/pulls/{}".format(user, repo, self.number))
-        #response = requests.get("https://api.github.com/repos/{}/{}/pulls/{}".format(user, repo, self.number))
-        pull_request_data = response.json()
-
-        self.num_commits = pull_request_data["commits"]
-        self.additions = pull_request_data["additions"]
-        self.deletions = pull_request_data["deletions"]
-        self.changed_files = pull_request_data["changed_files"]
-        
-        # print all
-        print()
-        print(self.title)
-        print(self.number)
-        # print(self.body)
-        print(self.state)
-        print(self.date_of_creation)
-        print(self.user)               
-        if (self.closing_date != None):
-            print(self.closing_date)
-        print(self.num_commits)
-        print(self.additions)
-        print(self.deletions)
-        print(self.changed_files)
-        # END print all
-        
-        
-    def __str__(self):
-        return "{} ({})".format(self.title, self.state)
-
-
-    def to_CSV(self, filename):
-        directory = os.getcwd() + "/repos"
-        path = "{}/{}".format(directory, filename)
-        
-        # if dir doesn't exist
-        if (not os.path.exists(directory)):
-            try:
-                os.mkdir(directory)
-            except OSError:
-                print ("Creation of the directory %s failed" % directory)
-
-        # # cd into dir ~ TODO check
-        # os.chdir(path)
-
-        file_exist = os.path.exists(path)
-        
-        with open(path, mode='a', newline='') as CSVfile:
-            file_writer = csv.writer(CSVfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
-            
-            if (not file_exist):
-                file_writer.writerow(vars(self))
-
-            file_writer.writerow(vars(self).values())
-            
-
-class Author:
-    def __init__(self, user):
-        self.user = user
-        self.num_pull_requests = 1
-        # set defaults for pages that might not have this data
-        self.num_followers = 0
-        self.num_following = 0
-        self.num_contributions = 0       
-        
-        # scrape user info from page
-        response = requests.get("https://github.com/{}".format(user))        
-        soup = bs(response.content, "html.parser")
-
-        # if user found
-        if (response.status_code == 200):
-            # get num followers
-            num_followers = soup.find("a", attrs={"href": "/{}?tab=followers".format(user)}) # inside this block
-            if (num_followers != None):
-                num_followers = num_followers.find("span", attrs={"class": "text-bold text-gray-dark"}) # find it! scrape it!
-                self.num_followers = int(num_followers.text)
-
-            # get num following
-            num_following = soup.find("a", attrs={"href": "/{}?tab=following".format(user)}) # inside this block
-            if (num_following != None):
-                num_following = num_following.find("span", attrs={"class": "text-bold text-gray-dark"}) # find it! scrape it!
-                self.num_following = int(num_following.text)
-
-            # get num repos
-            num_repos = soup.find("a", attrs={"href": "/{}?tab=repositories".format(user)}) # inside this block
-            num_repos = num_repos.find("span", attrs={"class": "Counter"}) # find it! scrape it!
-            self.num_repos = int(num_repos.text) + 1 # it's a counter so it starts at zero (add 1)
-
-            # get number contributions in last year 
-            num_contributions = soup.find("div", attrs={"class": "js-yearly-contributions"}) # inside this block
-            num_contributions = num_contributions.find("h2") # find it! scrape it!
-            self.num_contributions = int("".join(filter(str.isdigit, num_contributions.text))) # get number from str
-        else:
-            print("\n\n")
-            print(user, "not found");
-            print("\n\n")
-            
-        
-    def inc_num_pull_requests(self):
-        self.num_pull_requests = self.num_pull_requests + 1
-
-
-    def __str__(self):
-        return "{}: {}".format(self.user, self.num_pull_requests)
-            
-
-    def to_CSV(self, filename):
-        file_exist = os.path.exists(filename)
-
-        header = vars(self).copy()
-
-        with open(filename, mode='a', newline='') as CSVfile:
-            file_writer = csv.writer(CSVfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
-            
-            if(not file_exist):
-                file_writer.writerow(header)
-
-            file_writer.writerow(header.values())
-
-
-# Check limit
-# username = 'mcp292'
-# token = ''
-
-# sesh = requests.Session()
-# sesh.auth = (username, token)
-
-# response = sesh.get("https://api.github.com/users/{}".format(username))
-# print(format_json(dict(response.headers)))
-
-
-
-repo = Repo("JabRef", "jabref")
-repo = Repo("git", "git")
-
+'''{
+    "id": 308466780,
+    "node_id": "MDEwOlJlcG9zaXRvcnkzMDg0NjY3ODA=",
+    "name": "CS599",
+    "full_name": "salonij779/CS599",
+    "private": false,
+    "owner": {
+        "login": "salonij779",
+        "id": 54954772,
+        "node_id": "MDQ6VXNlcjU0OTU0Nzcy",
+        "avatar_url": "https://avatars3.githubusercontent.com/u/54954772?v=4",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/salonij779",
+        "html_url": "https://github.com/salonij779",
+        "followers_url": "https://api.github.com/users/salonij779/followers",
+        "following_url": "https://api.github.com/users/salonij779/following{/other_user}",
+        "gists_url": "https://api.github.com/users/salonij779/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/salonij779/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/salonij779/subscriptions",
+        "organizations_url": "https://api.github.com/users/salonij779/orgs",
+        "repos_url": "https://api.github.com/users/salonij779/repos",
+        "events_url": "https://api.github.com/users/salonij779/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/salonij779/received_events",
+        "type": "User",
+        "site_admin": false
+    },
+    "html_url": "https://github.com/salonij779/CS599",
+    "description": null,
+    "fork": false,
+    "url": "https://api.github.com/repos/salonij779/CS599",
+    "forks_url": "https://api.github.com/repos/salonij779/CS599/forks",
+    "keys_url": "https://api.github.com/repos/salonij779/CS599/keys{/key_id}",
+    "collaborators_url": "https://api.github.com/repos/salonij779/CS599/collaborators{/collaborator}",
+    "teams_url": "https://api.github.com/repos/salonij779/CS599/teams",
+    "hooks_url": "https://api.github.com/repos/salonij779/CS599/hooks",
+    "issue_events_url": "https://api.github.com/repos/salonij779/CS599/issues/events{/number}",
+    "events_url": "https://api.github.com/repos/salonij779/CS599/events",
+    "assignees_url": "https://api.github.com/repos/salonij779/CS599/assignees{/user}",
+    "branches_url": "https://api.github.com/repos/salonij779/CS599/branches{/branch}",
+    "tags_url": "https://api.github.com/repos/salonij779/CS599/tags",
+    "blobs_url": "https://api.github.com/repos/salonij779/CS599/git/blobs{/sha}",
+    "git_tags_url": "https://api.github.com/repos/salonij779/CS599/git/tags{/sha}",
+    "git_refs_url": "https://api.github.com/repos/salonij779/CS599/git/refs{/sha}",
+    "trees_url": "https://api.github.com/repos/salonij779/CS599/git/trees{/sha}",
+    "statuses_url": "https://api.github.com/repos/salonij779/CS599/statuses/{sha}",
+    "languages_url": "https://api.github.com/repos/salonij779/CS599/languages",
+    "stargazers_url": "https://api.github.com/repos/salonij779/CS599/stargazers",
+    "contributors_url": "https://api.github.com/repos/salonij779/CS599/contributors",
+    "subscribers_url": "https://api.github.com/repos/salonij779/CS599/subscribers",
+    "subscription_url": "https://api.github.com/repos/salonij779/CS599/subscription",
+    "commits_url": "https://api.github.com/repos/salonij779/CS599/commits{/sha}",
+    "git_commits_url": "https://api.github.com/repos/salonij779/CS599/git/commits{/sha}",
+    "comments_url": "https://api.github.com/repos/salonij779/CS599/comments{/number}",
+    "issue_comment_url": "https://api.github.com/repos/salonij779/CS599/issues/comments{/number}",
+    "contents_url": "https://api.github.com/repos/salonij779/CS599/contents/{+path}",
+    "compare_url": "https://api.github.com/repos/salonij779/CS599/compare/{base}...{head}",
+    "merges_url": "https://api.github.com/repos/salonij779/CS599/merges",
+    "archive_url": "https://api.github.com/repos/salonij779/CS599/{archive_format}{/ref}",
+    "downloads_url": "https://api.github.com/repos/salonij779/CS599/downloads",
+    "issues_url": "https://api.github.com/repos/salonij779/CS599/issues{/number}",
+    "pulls_url": "https://api.github.com/repos/salonij779/CS599/pulls{/number}",
+    "milestones_url": "https://api.github.com/repos/salonij779/CS599/milestones{/number}",
+    "notifications_url": "https://api.github.com/repos/salonij779/CS599/notifications{?since,all,participating}",
+    "labels_url": "https://api.github.com/repos/salonij779/CS599/labels{/name}",
+    "releases_url": "https://api.github.com/repos/salonij779/CS599/releases{/id}",
+    "deployments_url": "https://api.github.com/repos/salonij779/CS599/deployments",
+    "created_at": "2020-10-29T22:42:23Z",
+    "updated_at": "2020-11-16T12:43:06Z",
+    "pushed_at": "2020-10-29T22:42:53Z",
+    "git_url": "git://github.com/salonij779/CS599.git",
+    "ssh_url": "git@github.com:salonij779/CS599.git",
+    "clone_url": "https://github.com/salonij779/CS599.git",
+    "svn_url": "https://github.com/salonij779/CS599",
+    "homepage": null,
+    "size": 1,
+    "stargazers_count": 0,
+    "watchers_count": 0,
+    "language": "C",
+    "has_issues": true,
+    "has_projects": true,
+    "has_downloads": true,
+    "has_wiki": true,
+    "has_pages": false,
+    "forks_count": 0,
+    "mirror_url": null,
+    "archived": false,
+    "disabled": false,
+    "open_issues_count": 0,
+    "license": null,
+    "forks": 0,
+    "open_issues": 0,
+    "watchers": 0,
+    "default_branch": "main",
+    "temp_clone_token": null,
+    "network_count": 0,
+    "subscribers_count": 1
+}'''
+
+import requests
+from bs4 import BeautifulSoup
+from datetime import date
+from dateutil import parser
+import csv
+import pathlib
+import pandas as pd
+import time
+import os
+import matplotlib.pyplot as plt
+
+username = 'as4378'
+token = 'cc3ab432f5da0f6c84798b9f010fe319cfeae276'
+gh_session = requests.Session()
+gh_session.auth = (username, token)
+
+login_list = []
+users_list = []
+pull_requests_list = []
+repos_list = []
+pull_requests_list = []
+
+
+class User:
+    def __init__(self, login, repositories, projects, followers, following, contributions):
+        self.login = login
+        self.repositories = repositories
+        self.projects = projects
+        self.followers = followers
+        self.following = following
+        self.contributions = contributions
+        self.pull_requests = None
+
+    def to_CSV(self):
+        return [self.login, self.repositories, self.projects, self.followers, self.following,
+                self.contributions, len(self.pull_requests)]
+
+    def get_header(self):
+        return ["login", "repositories", "projects", "followers", "following", "contributions",
+                "pull_requests"]
+
+    def as_dict(self):
+        return {'login': self.login, 'followers': self.followers, 'following': self.following,
+                'contributions': self.contributions, 'pull_requests': len(self.pull_requests),
+                'repositories': self.repositories}
+
+
+class Repository:
+    def __init__(self, name, owner, description, homepage, license, forks, watchers):
+        self.date_of_collection = str(date.today())
+        self.name = name
+        self.owner = owner
+        self.description = description
+        self.homepage = homepage
+        self.license = license
+        self.forks = forks
+        self.watchers = watchers
+        self.pull_requests = []
+
+    def to_CSV(self):
+        return [self.date_of_collection, self.name, self.owner, self.description,
+                self.homepage, self.license, self.forks, self.watchers]
+
+    def get_header(self):
+        return ["date_of_collection", "name", "owner", "description", "homepage", "license", "forks", "watchers"]
+
+    def print_info(self):
+        print(str(self.owner) + "/" + str(self.name) + ": " + str(self.description) + "(" + str(self.watchers) + ")")
+
+
+class PullRequest:
+    def __init__(self, repo_name, title, number, body, state, date_of_creation, closing_date, user,
+                 commits, additions, deletions, changed_files):
+        self.repo_name = repo_name
+        self.title = title
+        self.number = number
+        self.body = body
+        self.state = state
+        self.date_of_creation = date_of_creation
+        self.closing_date = closing_date
+        self.user = user
+        self.commits = commits
+        self.additions = additions
+        self.deletions = deletions
+        self.changed_files = changed_files
+
+    def to_CSV(self):
+        return [self.title, self.number, self.state, self.date_of_creation, self.closing_date, self.user,
+                self.commits, self.additions, self.deletions, self.changed_files]
+
+    def get_header(self):
+        return ["title", "number", "state", "date_of_creation", "closing_date", "user", "commits", "additions",
+                "deletions", "changed_files"]
+
+    def print_info(self):
+        print(str(self.number) + ": " + str(self.title))
+
+    def as_dict(self):
+        return {'state': self.state, 'commits': self.commits, 'additions': self.additions,
+                'deletions': self.deletions, 'changed_files': self.changed_files, 'user': self.user,
+                'date_of_creation': self.date_of_creation, 'repo_name': self.repo_name}
+
+
+# get repository information
+def get_repo_info(repo_name):
+    json_response_repos = gh_session.get("https://api.github.com/repos/" + str(repo_name))
+    return json_response_repos
+
+
+# pull request
+def get_pull_requests(owner, name):
+    url = "https://api.github.com/search/issues?q=is:pr+repo:"
+    current_url = url + str(owner) + "/" + str(name)
+    json_response_pulls = gh_session.get(current_url)
+    return json_response_pulls
+
+
+# pull request details
+def get_pull_request_details(owner, name, number):
+    url = "https://api.github.com/repos/" + str(owner) + "/" + str(name) + "/pulls/" + str(number)
+    json_response_pull = gh_session.get(url)
+    return json_response_pull
+
+
+# saving data of users
+def save_users_csv():
+    try:
+        for u in users_list:
+            to_CSV("users.csv", u)
+
+        print("Saved successfully!\n")
+        return True
+    except Exception as e:
+        print("Error ocurred in save_users_csv().\n")
+        print(e)
+        return False
+
+
+# project data saved
+def save_projects_csv():
+    try:
+        for r in repos_list:
+            to_CSV("projects.csv", r)
+
+        print("Saved successfully!\n")
+        return True
+    except Exception as e:
+        print("Error ocurred in save_projects_csv().\n")
+        print(e)
+        return False
+
+
+# save data to csv
+def save_pull_requests_csv():
+    try:
+        # create a projects folder if it does not exists
+        if not os.path.exists("projects"):
+            os.mkdir("projects")
+
+        for p in pull_requests_list:
+            file = "projects/" + str(p.user) + "-" + str(p.repo_name) + ".csv"
+            to_CSV(file, p)
+
+        print("Saved successfully!\n")
+        return True
+    except Exception as e:
+        print("Error ocurred in save_pull_requests_csv().\n")
+        print(e)
+        return False
+
+
+def to_CSV(file, row):
+    if pathlib.Path(file).exists():
+        with open(file, 'a', newline='') as fd:
+            csvwriter = csv.writer(fd)
+            csvwriter.writerow(row.to_CSV())
+    else:
+        with open(file, 'w', newline='') as fd:
+            csvwriter = csv.writer(fd)
+            csvwriter.writerow(row.get_header())
+            csvwriter.writerow(row.to_CSV())
+
+
+# get user data about repositories
+def collect_user_requested_repo(owner, repository):
+    try:
+        r = get_repo_info(str(owner) + "/" + str(repository)).json()
+
+        name = str(r["name"])
+        description = str(r["description"])
+        owner = str(r["owner"]["login"])
+        homepage = str(r["homepage"])
+        license = str(r["license"])
+        forks = str(r["forks"])
+        watchers = str(r["watchers"])
+
+        current_repo = Repository(name, owner, description, homepage, license, forks, watchers)
+        repos_list.append(current_repo)
+
+        current_pull_requests = []
+        current_pull_request = get_pull_requests(str(current_repo.owner), str(current_repo.name)).json()
+        current_pull_items = current_pull_request["items"]
+
+        for i in current_pull_items:
+            title = str(i["title"])
+            number = str(i["number"])
+            body = str(i["body"])
+            state = str(i["state"])
+            date_of_creation = str(i["created_at"])
+            closing_date = str(i["closed_at"]) if state != "open" else None
+            user = str(i["user"]["login"])
+
+            # different request url
+            pull_details = get_pull_request_details(current_repo.owner, current_repo.name, number).json()
+            commits = str(pull_details["commits"])
+            additions = str(pull_details["additions"])
+            deletions = str(pull_details["deletions"])
+            changed_files = str(pull_details["changed_files"])
+
+            current_pull_request = PullRequest(current_repo.name, title, number, body, state, date_of_creation,
+                                               closing_date, user,
+                                               commits, additions, deletions, changed_files)
+            pull_requests_list.append(current_pull_request)
+            current_pull_requests.append(current_pull_request)
+            current_repo.pull_requests.append(current_pull_request)
+
+        # scrape data
+        url = "https://github.com/"
+        repo_class = "Counter hide-lg hide-md hide-sm"
+        for p in current_pull_requests:
+            current_url = url + p.user
+            website_url = gh_session.get(current_url).text
+            soup = BeautifulSoup(website_url, 'lxml')
+            list_soup = soup.findAll("span", {"class": repo_class})
+            repo = list_soup[0].text.strip()
+            project = list_soup[1].text.strip()
+            stars = list_soup[2].text.strip()
+            followers = list_soup[3].text.strip()
+            following = list_soup[4].text.strip()
+
+            contributions = soup.findAll("h2", {"class": "f4 text-normal mb-2"})
+            contributions = str(contributions[0].text.strip().split()[0])
+
+            current_user = User(p.user, repo, project, followers, following, contributions)
+            users_list.append(current_user)
+            pull_requests = [p for p in pull_requests_list if p.user == current_user.login]
+            current_user.pull_requests = pull_requests
+
+        print("Data received successfully!\n")
+        return True
+
+    except Exception as e:
+        print("Error in collect_user_requested_repo().\n")
+        print(e)
+        return False
+
+
+#get all repo details
+def get_all_repos():
+    i = 1
+    for r in repos_list:
+        r.print_info()
+
+
+def get_pull_requests_for_repo(repo_index):
+    repo = repos_list[repo_index]
+    print("\n")
+    for p in repo.pull_requests:
+        p.print_info()
+
+
+def get_repo_summary(repo_index):
+    repo = repos_list[repo_index]
+    open_pull_requests = len([p for p in repo.pull_requests if p.state == "open"])
+    closed_pull_requests = len([p for p in repo.pull_requests if p.state == "closed"])
+    users = len(set([p.user for p in repo.pull_requests]))
+    oldest_pull_request = min([parser.parse(p.date_of_creation) for p in repo.pull_requests])
+    temp_users = list(set([p.user for p in repo.pull_requests]))
+    users_twitter = 0
+
+    for t in temp_users:
+        user = [u for u in users_list if u.login == t]
+        if user is not None and len(user) > 0:
+            user = user[0]
+            if user.has_a_twitter:
+                users_twitter += 1
+
+    print("\nSummary for " + str(repo.name) + " repository: \n")
+    print("No. of pull requests in open state: " + str(open_pull_requests))
+    print("No. of pull requests in closed state: " + str(closed_pull_requests))
+    print("No. of users: " + str(users))
+    print("Oldest pull request: " + str(oldest_pull_request.strftime('%m/%d/%Y')))
+    print("Users with valid twitter account: " + str(users_twitter))
+    print("\n")
+
+
+def print_graphics(repo_index):
+    repo = repos_list[repo_index]
+    pull_requests = [p for p in repo.pull_requests]
+    df = pd.DataFrame([p.as_dict() for p in pull_requests])
+
+    df["commits"] = pd.to_numeric(df["commits"])
+    df["additions"] = pd.to_numeric(df["additions"])
+    df["deletions"] = pd.to_numeric(df["deletions"])
+    df["changed_files"] = pd.to_numeric(df["changed_files"])
+
+    state_closed = df[df.state == "closed"]
+    state_open = df[df.state == "open"]
+    data_to_plot = [state_open['commits'], state_closed['commits']]
+    plt.boxplot(data_to_plot, patch_artist=True)
+    plt.title("open and closed pull requests per commits")
+    plt.show()
+
+    data_to_plot = [state_open['additions'], state_closed['additions']]
+    plt.boxplot(data_to_plot, patch_artist=True)
+    plt.title("open and closed pull requests per additions")
+    plt.show()
+
+    data_to_plot = [state_open['deletions'], state_closed['deletions']]
+    plt.boxplot(data_to_plot, patch_artist=True)
+    plt.title("open and closed pull requests per deletions")
+    plt.show()
+
+    df1 = df[['user', 'changed_files']]
+    df1 = df1.groupby('user')['changed_files'].apply(list)
+    df1 = df1.reset_index()
+    data_to_plot = [d for d in df1['changed_files']]
+    plt.boxplot(data_to_plot, patch_artist=True)
+    plt.title("number of changed_files grouped by user")
+    plt.show()
+
+    plt.scatter(df['additions'], df['deletions'])
+    plt.xlabel('additions')
+    plt.ylabel('deletions')
+    plt.title('additions vs deletions')
+    plt.show()
+
+    plt.hist(df['commits'])
+    plt.ylabel('no. of commits')
+    plt.title('no. of commits per pull request')
+    plt.show()
+
+
+def print_graphics_all():
+    df = pd.DataFrame([p.as_dict() for p in pull_requests_list])
+
+    df['date_of_creation'] = [parser.parse(x).date() for x in df['date_of_creation']]
+    df['commits'] = pd.to_numeric(df['commits'])
+
+    df['counts'] = df['commits']
+    df1 = df[['date_of_creation', 'counts']]
+    df1 = df1.groupby('date_of_creation').count()
+    df1 = df1.reset_index()
+    plt.plot(df1['date_of_creation'], df1['counts'])
+    plt.title("number of pull requests per day")
+    plt.xlabel("day")
+    plt.ylabel("no. of pull-requests")
+    plt.show()
+
+    df_open = df[df['state'] == 'open']
+    df_open = df_open[['date_of_creation', 'counts']]
+    df_open = df_open.groupby('date_of_creation').count()
+    df_open = df_open.reset_index()
+    plt.plot(df_open['date_of_creation'], df_open['counts'], label='open')
+
+    df_closed = df[df['state'] == 'closed']
+    df_closed = df_closed[['date_of_creation', 'counts']]
+    df_closed = df_closed.groupby('date_of_creation').count()
+    df_closed = df_closed.reset_index()
+    plt.plot(df_closed['date_of_creation'], df_closed['counts'], label='closed')
+
+    plt.legend()
+    plt.xlabel("day")
+    plt.ylabel("no. of pull-requests")
+    plt.title("open and closed pull-requests per day")
+    plt.show()
+
+    df_users_repo = pd.DataFrame(columns=['repo', 'users'])
+
+    i = 0
+    for r in repos_list:
+        users = len(set([p.user for p in r.pull_requests]))
+        df_users_repo.loc[i] = [r.name, users]
+        i += 1
+
+    plt.bar(df_users_repo['repo'], df_users_repo['users'])
+    plt.xlabel("repository")
+    plt.ylabel("no. of users")
+    plt.title("no. of users per repository")
+    plt.show()
+
+    plt.hist(df['commits'])
+    plt.xlabel("pull-request")
+    plt.ylabel('no. of commits')
+    plt.title('no. of commits per pull request')
+    plt.show()
+
+
+def list_all_repos():
+    i = 1
+    print("The repositories available are:\n")
+    for r in repos_list:
+        print(str(i) + ". " + str(r.name) + "\n")
+        i += 1
+
+
+def list_all_pull_requests(repo_index):
+    repo = repos_list[repo_index]
+    print("The pull requests are:\n")
+    for p in repo.pull_requests:
+        print(p.number + str(". ") + p.title)
+
+
+def get_corr_users():
+    df = pd.DataFrame([u.as_dict() for u in users_list])
+
+    df['followers'] = [x.replace(",", "").replace(" ", "") for x in df['followers']]
+    df['followers'] = [float(x[:-1]) * 1000 if x[-1] == 'k' else float(x) for x in df['followers']]
+
+    df['following'] = [x.replace(",", "").replace(" ", "") for x in df['following']]
+    df['following'] = [float(x[:-1]) * 1000 if x[-1] == 'k' else float(x) for x in df['following']]
+
+    df['contributions'] = [x.replace(",", "").replace(" ", "") for x in df['contributions']]
+    df['contributions'] = [float(x[:-1]) * 1000 if x[-1] == 'k' else float(x) for x in df['contributions']]
+
+    df['repositories'] = [x.replace(",", "").replace(" ", "") for x in df['repositories']]
+    df['repositories'] = [float(x[:-1]) * 1000 if x[-1] == 'k' else float(x) for x in df['repositories']]
+
+    df['pull_requests'] = pd.to_numeric(df['pull_requests'])
+    print(df.corr())
+    print("\n")
+
+
+def get_corr_pull_requests(repo_index):
+    repo = repos_list[repo_index]
+    df = pd.DataFrame([p.as_dict() for p in repo.pull_requests])
+    df = df[['commits', 'additions', 'deletions', 'changed_files']]
+    df['commits'] = pd.to_numeric(df['commits'])
+    df['additions'] = pd.to_numeric(df['additions'])
+    df['deletions'] = pd.to_numeric(df['deletions'])
+    df['changed_files'] = pd.to_numeric(df['changed_files'])
+    print(df.corr())
+    print("\n")
+
+
+if __name__ == "__main__":
+    select = 0
+
+    try:
+        while select != 10:
+
+            print("Choose from one of the following options: ")
+            print("\t1. Data for a specific repository from github")
+            print("\t2. List all the collected repositories")
+            print("\t3. List all pull requests from an existing repository")
+            print("\t4. List the summary of a repository")
+            print("\t5. Create graphics for a given repository")
+            print("\t6. Create graphics for all the collected repositories")
+            print("\t7. Calculate correlation between the data collected for users")
+            print("\t8. Calculate correlation between all the numeric data in the pull requests for a repository")
+            print("\t9. Save to CSV")
+            print("\t10 Exit")
+
+            select = int(input("Enter your choice: "))
+            if select == 1:
+                owner = input("Enter the github owner name: ")
+                repo = input("Enter the repository name: ")
+                collect_user_requested_repo(owner, repo)
+            elif select == 2:
+                list_all_repos()
+            elif select == 3:
+                list_all_repos()
+                print("Select a repo from the list")
+                index = int(input("Enter index of repo: "))
+                list_all_pull_requests(index - 1)
+            elif select == 4:
+                list_all_repos()
+                print("Select a repo from the list")
+                index = int(input("Enter index of repo: "))
+                get_repo_summary(index - 1)
+            elif select == 5:
+                list_all_repos()
+                print("Select a repo from the list")
+                index = int(input("Enter index of repo: "))
+                print_graphics(index - 1)
+            elif select == 6:
+                print_graphics_all()
+            elif select == 7:
+                get_corr_users()
+            elif select == 8:
+                list_all_repos()
+                print("Select repo from the list")
+                index = int(input("Enter index of repo: "))
+                get_corr_pull_requests(index - 1)
+            elif select == 9:
+                print("\ta. Save users data to users.csv.")
+                print("\tb. Save projects data to projects.csv.")
+                print("\tc. Save pull requests data to projects/owner-project.csv.\n")
+                temp = int(input("Enter the number corresponding to the Action of interest: "))
+                if temp == 'a':
+                    save_users_csv()
+                elif temp == 'b':
+                    save_projects_csv()
+                elif temp == 'c':
+                    save_pull_requests_csv()
+                else:
+                    print("invalid selection\n")
+
+            elif select == 10:
+                break
+            else:
+                print("invalid selection\n")
+
+    except Exception as e:
+        print(e)
